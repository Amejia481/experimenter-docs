(self.webpackChunkexperimenter_docs=self.webpackChunkexperimenter_docs||[]).push([[2665],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return h}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=u(n),h=i,m=d["".concat(s,".").concat(h)]||d[h]||c[h]||l;return n?a.createElement(m,r(r({ref:t},p),{},{components:n})):a.createElement(m,r({ref:t},p))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,r=new Array(l);r[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,r[1]=o;for(var u=2;u<l;u++)r[u]=n[u];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8215:function(e,t,n){"use strict";var a=n(7294);t.Z=function(e){var t=e.children,n=e.hidden,i=e.className;return a.createElement("div",{role:"tabpanel",hidden:n,className:i},t)}},5064:function(e,t,n){"use strict";n.d(t,{Z:function(){return u}});var a=n(7294),i=n(9443);var l=function(){var e=(0,a.useContext)(i.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},r=n(6010),o="tabItem_1uMI",s="tabItemActive_2DSg";var u=function(e){var t,n=e.lazy,i=e.block,u=e.defaultValue,p=e.values,c=e.groupId,d=e.className,h=a.Children.toArray(e.children),m=null!=p?p:h.map((function(e){return{value:e.props.value,label:e.props.label}})),f=null!=u?u:null==(t=h.find((function(e){return e.props.default})))?void 0:t.props.value,g=l(),b=g.tabGroupChoices,k=g.setTabGroupChoices,v=(0,a.useState)(f),y=v[0],N=v[1],w=[];if(null!=c){var T=b[c];null!=T&&T!==y&&m.some((function(e){return e.value===T}))&&N(T)}var x=function(e){var t=e.currentTarget,n=w.indexOf(t),a=m[n].value;N(a),null!=c&&(k(c,a),setTimeout((function(){var e,n,a,i,l,r,o,u;(e=t.getBoundingClientRect(),n=e.top,a=e.left,i=e.bottom,l=e.right,r=window,o=r.innerHeight,u=r.innerWidth,n>=0&&l<=u&&i<=o&&a>=0)||(t.scrollIntoView({block:"center",behavior:"smooth"}),t.classList.add(s),setTimeout((function(){return t.classList.remove(s)}),2e3))}),150))},C=function(e){var t,n=null;switch(e.key){case"ArrowRight":var a=w.indexOf(e.target)+1;n=w[a]||w[0];break;case"ArrowLeft":var i=w.indexOf(e.target)-1;n=w[i]||w[w.length-1]}null==(t=n)||t.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":i},d)},m.map((function(e){var t=e.value,n=e.label;return a.createElement("li",{role:"tab",tabIndex:y===t?0:-1,"aria-selected":y===t,className:(0,r.Z)("tabs__item",o,{"tabs__item--active":y===t}),key:t,ref:function(e){return w.push(e)},onKeyDown:C,onFocus:x,onClick:x},null!=n?n:t)}))),n?(0,a.cloneElement)(h.filter((function(e){return e.props.value===y}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},h.map((function(e,t){return(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==y})}))))}},9443:function(e,t,n){"use strict";var a=(0,n(7294).createContext)(void 0);t.Z=a},831:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return u},metadata:function(){return p},toc:function(){return c},default:function(){return h}});var a=n(2122),i=n(9756),l=(n(7294),n(3905)),r=n(5064),o=n(8215),s={id:"fml-spec",title:"The Feature Manifest Language spec",slug:"/fml-spec"},u="The Feature Manifest Language",p={unversionedId:"fml-spec",id:"fml-spec",isDocsHomePage:!1,title:"The Feature Manifest Language spec",description:"About this document",source:"@site/docs/fml-spec.mdx",sourceDirName:".",slug:"/fml-spec",permalink:"/fml-spec",editUrl:"https://github.com/mozilla/experimenter-docs/edit/main/docs/fml-spec.mdx",tags:[],version:"current",frontMatter:{id:"fml-spec",title:"The Feature Manifest Language spec",slug:"/fml-spec"}},c=[{value:"About this document",id:"about-this-document",children:[]},{value:"Introduction",id:"introduction",children:[]},{value:"High level concepts",id:"high-level-concepts",children:[{value:"JSON Merge Patch",id:"json-merge-patch",children:[]},{value:"About the generated code",id:"about-the-generated-code",children:[]},{value:"Identifier cases",id:"identifier-cases",children:[]}]},{value:"Introducing the FML",id:"introducing-the-fml",children:[{value:"Features have <code>variables</code>",id:"features-have-variables",children:[]},{value:"Enumerations",id:"enumerations",children:[]}]},{value:"Feature defaults",id:"feature-defaults",children:[{value:"Feature defaults and channels",id:"feature-defaults-and-channels",children:[]}]},{value:"Additional types",id:"additional-types",children:[{value:"Primitive types",id:"primitive-types",children:[]},{value:"Suggested values",id:"suggested-values",children:[]},{value:"Object types",id:"object-types",children:[]},{value:"Structural types",id:"structural-types",children:[]}]}],d={toc:c};function h(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,l.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"the-feature-manifest-language"},"The Feature Manifest Language"),(0,l.kt)("h2",{id:"about-this-document"},"About this document"),(0,l.kt)("p",null,"This document is the specfiication for the Feature Manifest Language for use with the Nimbus SDK."),(0,l.kt)("p",null,"Language features that have not yet been implemented are marked as so."),(0,l.kt)("h2",{id:"introduction"},"Introduction"),(0,l.kt)("p",null,"Nimbus is an experimentation platform to allow product owners to easily run experiments on their mobile apps."),(0,l.kt)("p",null,"The ",(0,l.kt)("a",{parentName:"p",href:"/feature-variables-and-me"},"Feature API")," allows application developers to query Nimbus for JSON objects which they could use to configure the app's features."),(0,l.kt)("p",null,"The Feature Manifest is a significant evolution of the Feature API: by generating Kotlin and Swift code, it adds type-safety, schema checking and defaulting to the Feature API."),(0,l.kt)("h2",{id:"high-level-concepts"},"High level concepts"),(0,l.kt)("p",null,"To the product owner, Nimbus allows you to experiment with different configurations of the application."),(0,l.kt)("p",null,"It does this by exposing a pre-determined proportion of the audience to different configurations of a feature. Once a winning configuration is identified, it can be rolled out to the rest of the audience, all without a re-release of the app."),(0,l.kt)("p",null,"To the app developer, ",(0,l.kt)("strong",{parentName:"p"},"Nimbus is a configuration store"),". Features are configured using data from Nimbus. Nimbus is updated at startup of each run."),(0,l.kt)("p",null,'The "Feature" in "Feature API" and "Feature Manifest" refers to configuration for a specific application feature.'),(0,l.kt)("p",null,'The "Feature Manifest" is a schema for all the features in an app. This is used for generating type safe ',(0,l.kt)("inlineCode",{parentName:"p"},"struct"),"s and ",(0,l.kt)("inlineCode",{parentName:"p"},"data class"),"es, and a schema for Experimenter to validate the configuration during experiment setup."),(0,l.kt)("p",null,'The "Feature Manifest Language" is definition language for writing feature manifest.'),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"nimbus-fml")," is the name fo the tool for processing the feature manifest, to generate Swift and Kotlin and the JSON schema that Experimenter can ingest."),(0,l.kt)("p",null,"Features are configured remotely by sending JSON objects to the Nimbus SDK on each device. It is the job of the ",(0,l.kt)("inlineCode",{parentName:"p"},"nimbus-fml"),", and the code that it generates to unpack that JSON, validate it, coerce it into values usable by the app and recover if anything goes wrong."),(0,l.kt)("h3",{id:"json-merge-patch"},"JSON Merge Patch"),(0,l.kt)("p",null,"For each feature, the feature manifest should define a complete configuration needed by the app, including a default value for every variable."),(0,l.kt)("p",null,"Remotely set experiments and rollouts will vary the configurations by presenting ",(0,l.kt)("em",{parentName:"p"},"patches")," on that configuration. If the complete configuration of the feature can be\nrepresented by a JSON object, then patches to that configuration would be applied in a manner consistent with ",(0,l.kt)("a",{parentName:"p",href:"https://datatracker.ietf.org/doc/html/rfc7396"},"JSON Merge Patch RFC 7396"),"."),(0,l.kt)("h3",{id:"about-the-generated-code"},"About the generated code"),(0,l.kt)("p",null,"Each project has its own manifest file, containing all the features configured in that project."),(0,l.kt)("p",null,"Running ",(0,l.kt)("inlineCode",{parentName:"p"},"nimbus-fml")," for a manifest generates a Swift or Kotlin class, which is named as a commmand line argument."),(0,l.kt)("p",null,"In the examples, this class is called ",(0,l.kt)("inlineCode",{parentName:"p"},"FxNimbus"),", but this is project specific. This is the entry point to getting values out of Nimbus."),(0,l.kt)("p",null,"The generated class must be connected to the Nimbus SDK, which downloads the experiment recipes and decides which experiments this user is in."),(0,l.kt)(r.Z,{defaultValue:"swift",values:[{label:"Swift",value:"swift"},{label:"Kotlin",value:"kotlin"}],mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"swift",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-swift"},"// Initialize the Nimbus SDK\nlet nimbus = createNimbusForApplication()\n// Connect the generated code to the Nimbus SDK\nFxNimbus.api = nimbus\n"))),(0,l.kt)(o.Z,{value:"kotlin",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"// Initialize the Nimbus SDK\nval nimbus = createNimbusForApplication()\n// Connect the generated code to the Nimbus SDK\nFxNimbus.api = nimbus\n")))),(0,l.kt)("p",null,"Feature configuration for each feature are accessed through the ",(0,l.kt)("inlineCode",{parentName:"p"},"FxNimbus.features")," property. For example, a ",(0,l.kt)("inlineCode",{parentName:"p"},"newtab")," feature's configuration can be accessed thus:"),(0,l.kt)(r.Z,{defaultValue:"swift",values:[{label:"Swift",value:"swift"},{label:"Kotlin",value:"kotlin"}],mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"swift",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-swift"},"let newTabConfig = FxNimbus.features.newtab.value()\n"))),(0,l.kt)(o.Z,{value:"kotlin",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"val newTabConfig = FxNimbus.features.newtab.value()\n")))),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Details:\nWhen the ",(0,l.kt)("inlineCode",{parentName:"p"},"value()")," method is called:"),(0,l.kt)("ul",{parentName:"blockquote"},(0,l.kt)("li",{parentName:"ul"},"the Nimbus ",(0,l.kt)("inlineCode",{parentName:"li"},"api")," is queried to get a JSON object for the feature with id of ",(0,l.kt)("inlineCode",{parentName:"li"},"newtab")),(0,l.kt)("li",{parentName:"ul"},"the result is used to construct an instance of ",(0,l.kt)("inlineCode",{parentName:"li"},"Newtab"),", which is generated by the FML"),(0,l.kt)("li",{parentName:"ul"},"the ",(0,l.kt)("inlineCode",{parentName:"li"},"Newtab")," object merges its default values with the values from the JSON."))),(0,l.kt)("p",null,"You should record when the user has been exposed to the feature. For example, if the feature being configured are the items in the ",(0,l.kt)("inlineCode",{parentName:"p"},"app-menu"),", then when the user ",(0,l.kt)("em",{parentName:"p"},"opens")," the app menu, you should call ",(0,l.kt)("inlineCode",{parentName:"p"},"recordExposure"),"."),(0,l.kt)(r.Z,{defaultValue:"swift",values:[{label:"Swift",value:"swift"},{label:"Kotlin",value:"kotlin"}],mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"swift",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-swift"},"FxNimbus.features.appMenu.recordExposure()\n"))),(0,l.kt)(o.Z,{value:"kotlin",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"FxNimbus.features.appMenu.recordExposure()\n")))),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Feature design hint:\nAs a rule of thumb, if you find yourself calling ",(0,l.kt)("inlineCode",{parentName:"p"},"recordExposure")," for the same feature in multiple places, you probably should rethink\nwhat the feature actually is. This is best shown as in a bad\ne.g. an ",(0,l.kt)("inlineCode",{parentName:"p"},"app-menu")," may have a hamburger menu icon, and some menu items.\nThe user is exposed to the hamburger menu icon every time the toolbar is shown, but the menu items only when the menu is opened.\nThis would suggest that the hamburger menu icon needs to be specified in a different feature, e.g. the ",(0,l.kt)("inlineCode",{parentName:"p"},"toolbar")," feature.")),(0,l.kt)("h3",{id:"identifier-cases"},"Identifier cases"),(0,l.kt)("p",null,"All the examples below use ",(0,l.kt)("inlineCode",{parentName:"p"},"kebab-case")," for identifiers. When these identifiers are used to generate code, they are transformed to the language-specific casing. For example, a feature is specified in the FML as being called ",(0,l.kt)("inlineCode",{parentName:"p"},"spotlight-search"),", but would be referred to in Swift as ",(0,l.kt)("inlineCode",{parentName:"p"},"spotlightSearch"),"."),(0,l.kt)("h2",{id:"introducing-the-fml"},"Introducing the FML"),(0,l.kt)("p",null,"The ",(0,l.kt)("a",{parentName:"p",href:"/fml-front-end-format"},"Feature Manifest Language is a dialect of YAML"),". The manifest file, say ",(0,l.kt)("inlineCode",{parentName:"p"},"nimbus.fml.yaml")," must be valid YAML."),(0,l.kt)("p",null,"YAML was chosen, in part, because it allows comments, there are many high quality parsers, and is a superset of JSON; JSON is used extensively in the configuration of features."),(0,l.kt)("p",null,"At a minimum the ",(0,l.kt)("inlineCode",{parentName:"p"},"nimbus.fml.yaml")," file defines a map of features."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"# A YAML file to define Nimbus features.\n# This file has zero features.\nfeatures: {}\n")),(0,l.kt)("p",null,"This ",(0,l.kt)("inlineCode",{parentName:"p"},"features")," property is a mapping of feature-id to feature. Feature IDs need to be valid strings. In this document all feature IDs are ",(0,l.kt)("inlineCode",{parentName:"p"},"kebab-cased")," in the manifest."),(0,l.kt)("p",null,"Adding features to this object will automatically be picked up by Experimenter."),(0,l.kt)("p",null,"They are converted to ",(0,l.kt)("inlineCode",{parentName:"p"},"mixedCamelCase")," in both Kotlin and Swift."),(0,l.kt)("h3",{id:"features-have-variables"},"Features have ",(0,l.kt)("inlineCode",{parentName:"h3"},"variables")),(0,l.kt)("p",null,"We start with an example which configures the integration between Firefox for iOS and iOS Spotlight feature."),(0,l.kt)("p",null,"Here, we define a feature with an id of ",(0,l.kt)("inlineCode",{parentName:"p"},"spotlight-search"),", with two variables\u2014 ",(0,l.kt)("inlineCode",{parentName:"p"},"enabled")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"max-age-in-days")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"features:\n  spotlight-search:\n    description: Configuring how we integrate web-pages with iOS's Spotlight search\n    variables:\n      enabled:\n        description: If `false`, the app will not record anything with Spotlight.\n        type: Bool\n        default: false\n      max-age-in-days:\n        description: The number of days a single piece of content is indexed for.\n        type: Double\n        default: 28.0\n")),(0,l.kt)("p",null,"Each variable has a ",(0,l.kt)("inlineCode",{parentName:"p"},"description"),", a ",(0,l.kt)("inlineCode",{parentName:"p"},"type")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"default")," value."),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"description")," is copied verbatim into the generated code as comments. This will be visible in Xcode and Android Studio when navigating code or code completions."),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"type")," is the type name or type label that the variable will be. The type labels for variables will be familiar to developers who have written Kotlin, Swift or Typescript. The ",(0,l.kt)("a",{parentName:"p",href:"#additional-types"},"different types of types are discussed in detail below"),"."),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"default")," value is used when the variable is not set remotely, or there is a problem within the SDK."),(0,l.kt)("p",null,"The default value has to make sense in the context of the variable's type."),(0,l.kt)(r.Z,{defaultValue:"swift",values:[{label:"Swift",value:"swift"},{label:"Kotlin",value:"kotlin"}],mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"swift",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-swift"},"let spotlightConfig = FxNimbus.features.spotlightSearch.value()\nguard spotlightConfig.enabled else {\n    return\n}\n\n// let item = CSSearchableItem(\u2026)\n\nlet oneDayInSeconds: TimeInterval = 24 * 60 * 60\nlet maxAgeInSeconds = Double(spotlightConfig.maxAgeInDays) * oneDayInSeconds\nitem.expirationDate = Date(timeIntervalSinceNow: maxAgeInSeconds)\n"))),(0,l.kt)(o.Z,{value:"kotlin",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"val spotlightConfig = FxNimbus.features.spotlightSearch.value()\nif (!spotlightConfig.enabled) {\n    return\n}\n\n// val item = SearchableItem(\u2026)\n\nval oneDayInSeconds: Int = 24 * 60 * 60\nval maxAgeInSeconds = spotlightConfig.maxAgeInDays * oneDayInSeconds\nitem.expirationDate = Date().addSeconds(maxAgeInSeconds)\n")))),(0,l.kt)("p",null,"Notice that:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"the feature configuration is accessible from ",(0,l.kt)("inlineCode",{parentName:"li"},"FxNimbus.features.spotlightSearch.value()")),(0,l.kt)("li",{parentName:"ul"},"the feature id and variable names have been transformed to the Swift formatting convention; in this case both to mixed-camel-case."),(0,l.kt)("li",{parentName:"ul"},"the values consumed by Swift are non-optional.")),(0,l.kt)("p",null,"The generated code includes the defaults. It does not need to call into the Nimbus runtime or access the network."),(0,l.kt)(r.Z,{defaultValue:"swift",values:[{label:"Swift",value:"swift"},{label:"Kotlin",value:"kotlin"}],mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"swift",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-swift"},'struct SpotlightSearch {\n    private let variables: Variables?\n\n    init(variables: Variables? = nil) {\n        self.variables = variables\n    }\n\n    lazy var enabled: Bool = {\n        self.variables?.getBool("enabled") ?? false\n    }()\n\n    lazy var keepNumDays: Double = {\n        self.variables?.getDouble("enabled") ?? 28.0\n    }()\n}\n'))),(0,l.kt)(o.Z,{value:"kotlin",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},'data class SpotlightSearch(private val variables: Variables? = null) {\n    var enabled: Bool by lazy {\n        self.variables?.getBool("enabled") ?? false\n    }\n\n    var keepNumDays: Double by lazy {\n        self.variables?.getDouble("enabled") ?? 28.0\n    }\n}\n')))),(0,l.kt)("p",null,"Variables are evaluated lazily."),(0,l.kt)("h3",{id:"enumerations"},"Enumerations"),(0,l.kt)("p",null,"Using the same ",(0,l.kt)("inlineCode",{parentName:"p"},"spotlight-search")," feature from above. We notice that the we can include an icon in the search results."),(0,l.kt)("p",null,"However, we have some options around what to include, but we're not sure which is best."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},'features:\n  spotlight-search:\n    description: "Configuring how we integrate web-pages with iOS\'s Spotlight search"\n    variables:\n      # \u2026 other variables omitted for clarity\n      item-thumbnail:\n        description: "The icon that appears in the Spotlight search results.\n          Note that changing this does not change already indexed content."\n        type: ThumbnailType\n        default: letter\ntypes:\n  ThumbnailType:\n    description: An enum of types of icon that can be presented alongside titles of pages\n    variants:\n      letter: A rendering of the first letter of the domain name\n      screenshot: A screenshot thumbnail of the webppage\n      favicon: The favicon derived from the webpage\n      none: No icon is displayed\n')),(0,l.kt)("p",null,"The value ",(0,l.kt)("inlineCode",{parentName:"p"},"itemThumbnail")," is of type ",(0,l.kt)("inlineCode",{parentName:"p"},"ThumbnailType"),", which is generated as an enum. This can be used exhaustively matched in a ",(0,l.kt)("inlineCode",{parentName:"p"},"switch")," statement."),(0,l.kt)(r.Z,{defaultValue:"swift",values:[{label:"Swift",value:"swift"},{label:"Kotlin",value:"kotlin"}],mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"swift",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-swift"},"switch spotlightConfig.itemThumbnail {\n    case .favicon:\n        item.thumbnailData = FaviconFetcher.getFaviconFromDiskCache(imageKey: baseDomain)?.pngData()\n    case .letter:\n        item.thumbnailData = FaviconFetcher.letter(forUrl: url).pngData()\n    case .screenshot:\n        item.thumbnailData = tab.screenshot?.pngData()\n    case .none:\n        item.thumbnailData = nil\n}\n"))),(0,l.kt)(o.Z,{value:"kotlin",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"item.thumbnail = when (spotlightConfig.itemThumbnail) {\n    ThumbnailType.FAVICON ->\n        FaviconFetcher.getFaviconFromDiskCache(imageKey: baseDomain)\n    ThumbnailType.LETTER -> FaviconFetcher.letter(forUrl: url)\n    ThumbnailType.SCREENSHOT -> tab.screenshot\n    ThumbnailType.NONE -> null\n}\n")))),(0,l.kt)("p",null,"Note: this Spotlight API doesn't exist on Android; this code is illustrating the enums on the lefthand side of the ",(0,l.kt)("inlineCode",{parentName:"p"},"case")," clauses in the ",(0,l.kt)("inlineCode",{parentName:"p"},"when")," expression."),(0,l.kt)("p",null,"Note that enumeration variants in Swift are in ",(0,l.kt)("inlineCode",{parentName:"p"},"mixedCamelCase"),"; in Kotlin they are in ",(0,l.kt)("inlineCode",{parentName:"p"},"SCREAMING_SNAKE_CASE"),"."),(0,l.kt)("h2",{id:"feature-defaults"},"Feature defaults"),(0,l.kt)("p",null,"Already, in this simple example we have three variables. We may want to vary the configuration of the feature when the user is not involved in an experiment."),(0,l.kt)("p",null,"This might be because we have run an experiment and learned that a change of configuration should be made more permanent."),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"defaults"),' list is a list of zero or more "default blocks", used to patch the default values of the variables in a feature.'),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"value")," property defines the patch which is overlaid on top of the existing variable values."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},'features:\n  spotlight-search:\n    variables:\n      enabled:\n        description: If `false`, the app will not record anything with Spotlight.\n        type: Bool\n        default: false\n      max-age-in-days:\n        description: The number of days a single piece of content is indexed for.\n        type: Double\n        default: 28.0\n      item-thumbnail:\n        description: "The icon that appears in the Spotlight search results.\n          Note that changing this does not change already indexed content."\n        type: ThumbnailType\n        default: letter\n    defaults:\n      - value: { item-thumbnail: screenshot, max-age-in-days: 56.0 }\n')),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"defaults")," list of ",(0,l.kt)("inlineCode",{parentName:"p"},"value"),"s set the default value of ",(0,l.kt)("inlineCode",{parentName:"p"},"item-thumbnail")," to ",(0,l.kt)("inlineCode",{parentName:"p"},"screenshot"),", and ",(0,l.kt)("inlineCode",{parentName:"p"},"max-age-in-days")," to ",(0,l.kt)("inlineCode",{parentName:"p"},"56.0"),"."),(0,l.kt)("p",null,"Adding new feature blocks to the ",(0,l.kt)("inlineCode",{parentName:"p"},"defaults")," list patches the existing defaults further:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"    defaults:\n      - value: { item-thumbnail: screenshot, max-age-in-days: 56.0 }\n      - value: { max-age-in-days: 64.0 }\n")),(0,l.kt)("p",null,"In this case, the default value for ",(0,l.kt)("inlineCode",{parentName:"p"},"item-thumbnail")," is now ",(0,l.kt)("inlineCode",{parentName:"p"},"screenshot"),", and ",(0,l.kt)("inlineCode",{parentName:"p"},"max-age-in-days")," is ",(0,l.kt)("inlineCode",{parentName:"p"},"64.0"),"."),(0,l.kt)("h3",{id:"feature-defaults-and-channels"},"Feature defaults and channels"),(0,l.kt)("p",null,"Sometimes it is useful to have different default configurations for different ",(0,l.kt)("em",{parentName:"p"},"channels")," of an application. For example, you may want to have a feature available for testing on Nightly or Beta before turning it on in Release."),(0,l.kt)("p",null,"This is achieved by declaring ",(0,l.kt)("inlineCode",{parentName:"p"},"channels")," in the manifest."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},'channels:\n  - nightly\n  - beta\n  - release\nfeatures:\n  spotlight-search:\n    variables:\n      enabled:\n        description: "\u2026"\n        type: Bool\n        default: false\n    defaults:\n      - channel: nightly\n        value: { enabled: true }\n')),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"channel")," property specifies which build flavour the default applies. In this example, the ",(0,l.kt)("inlineCode",{parentName:"p"},"nightly")," version of the app set the ",(0,l.kt)("inlineCode",{parentName:"p"},"enabled")," variable to ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),"; all other versions of the app have ",(0,l.kt)("inlineCode",{parentName:"p"},"enabled")," as ",(0,l.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,l.kt)("p",null,"In this way, app developers can use the feature manifest as a replacement for other more adhoc feature flag solutions."),(0,l.kt)("h2",{id:"additional-types"},"Additional types"),(0,l.kt)("h3",{id:"primitive-types"},"Primitive types"),(0,l.kt)("p",null,"Primitive types supported:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"String")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"string")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Boolean"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"Bool")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"boolean"),". Both Kotlin and Swift's spelling is supported."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Int")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"integer"),".")),(0,l.kt)("h3",{id:"suggested-values"},"Suggested values"),(0,l.kt)("p",null,"Strings that can be coerced to resources within the bundle; however they are error prone to type in the Experimenter interface."),(0,l.kt)("p",null,"Suggested values can be used to suggest values to the experiment owner, with a description on what the resource will look like."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Text")," performs a lookup for displayable text in the application bundle. If not text exists, returns the string used for lookup."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Image")," performs a lookup for an image in the application bundle.")),(0,l.kt)("p",null,"For each of these types, the default value ",(0,l.kt)("em",{parentName:"p"},"must")," correspond to a valid resource identifier in the app."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"features:\n    upgrade-message:\n        description: A message displayed when the user upgrades\n        variables:\n            hero-image:\n                description: A pre-bundled image\n                type: Image\n                default: ic_fox\n                suggested:\n                  ic_fox: A picture of a cute fox\n                  ic_snow_fox: A picture of a cute snow fox\n                  ic_redpanda: A picture of a cute red panda\n            message-content:\n                description: Text content to show the user\n                default: msg_thankyou\n                suggested:\n                  msg_welldone: A nice well done for upgrading\n                  msg_thankyou: A nice thank you for sticking with us\n                  msg_warning: A warning that bad things happen to good people\n")),(0,l.kt)("h3",{id:"object-types"},"Object types"),(0,l.kt)("p",null,"Some features require more organization. In the case, JSON Objects can be coerced into generated data classes."),(0,l.kt)("p",null,"Object types have fields in the same way features have variables. Objects can be used in multiple places, and in more than one feature."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"features:\n  dialog-appearance:\n    description: A feature to vary the appearance of all toasts and modal dialogs\n    variables:\n      positive-button:\n        type: ButtonAppearance\n        default:\n          background-color: blue\n          text-color: white\n      neutral-button:\n        type: ButtonAppearance\n        default: {}\n      negative-button:\n        type: ButtonAppearance\n        default:\n          text-color: white\n          background-color: red\ntypes:\n  ButtonAppearance:\n    description: A button used in dialogs throughout the app\n    fields:\n      text-color:\n        description: The color of the text\n        type: String\n        default: black\n      background-color:\n        description: The background color\n        type: String\n        default: gray\n")),(0,l.kt)("p",null,"The JSON to recreate the defaults for the feature above would be:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "positive-button": {\n    "text-color": "blue",\n    "background-color": "white"\n  },\n  "neutral-button": {\n    "text-color": "black",\n    "background-color": "gray"\n  },\n  "negative-button": {\n    "text-color": "red",\n    "background-color": "white"\n  }\n}\n')),(0,l.kt)("h3",{id:"structural-types"},"Structural types"),(0,l.kt)("p",null,"Generic types aren't supported, but in the following section, ",(0,l.kt)("inlineCode",{parentName:"p"},"T")," can be any other type supported by the FML, including structural types."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Option<T>")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"T?")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"List<T>")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"[T]")," - lists of type ",(0,l.kt)("inlineCode",{parentName:"li"},"T"),". Lists are encoded with JSON arrays.\nLists are not merged, so are less useful than you might think."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Map<K, V>")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"[K: V]")," \u2014 maps with key type ",(0,l.kt)("inlineCode",{parentName:"li"},"K")," to ",(0,l.kt)("inlineCode",{parentName:"li"},"V"),".")),(0,l.kt)("p",null,"Maps are transported as JSON objects, which restrict the types of the keys to types that can be coerced from ",(0,l.kt)("inlineCode",{parentName:"p"},"String"),"s. Additionally, JSON values that cannot be coerced to the value type of the map are discarded."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"features:\n  homepage:\n    variables:\n      sections-enabled:\n        description: A map of whether or not to display the sections.\n        type: Map<SectionId, Boolean>\n        default:\n          top-sites: true\n          jump-back-in: false\n          pocket: false\n          recently-saved: false\n          recent-searches: false\n      section-ordering:\n        description: The order that the sections appear in on the homescreen.\n        type: List<SectionId>\n        value:\n          - jump-back-in\n          - pocket\n          - recently-saved\n          - recent-searches\n    defaults:\n      - channel: nightly\n        value:\n          {\n            top-sites: true,\n            jump-back-in: true,\n            recently-saved: true,\n            recent-searches: true,\n            pocket: true,\n          }\ntypes:\n  SectionId:\n    description: An enum representing the sections enabled by the homepage.\n    variants:\n      top-sites:\n        Frecency based URLs\n      jump-back-in:\n        Tabs which the user was interrupted while reading.\n      pocket:\n        URLs from the Pocket homepage\n      recently-saved:\n        URLs which were recently bookmarked or saved to Pocket\n      recent-searches:\n        Search queries and their opened results.\n")),(0,l.kt)("p",null,"In this example, a ",(0,l.kt)("inlineCode",{parentName:"p"},"Map<SectionId, Boolean>")," is used. ",(0,l.kt)("inlineCode",{parentName:"p"},"SectionId")," is an enum."),(0,l.kt)("p",null,"Maps with enum keys must have a default value for every variant of the enum."),(0,l.kt)("p",null,"Since maps are backed by JSON objects, the merge/patching allows entries to come from the manifest, experiments and rollouts simulatenously."))}h.isMDXComponent=!0},6010:function(e,t,n){"use strict";function a(e){var t,n,i="";if("string"==typeof e||"number"==typeof e)i+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=a(e[t]))&&(i&&(i+=" "),i+=n);else for(t in e)e[t]&&(i&&(i+=" "),i+=t);return i}function i(){for(var e,t,n=0,i="";n<arguments.length;)(e=arguments[n++])&&(t=a(e))&&(i&&(i+=" "),i+=t);return i}n.d(t,{Z:function(){return i}})}}]);