(self.webpackChunkexperimenter_docs=self.webpackChunkexperimenter_docs||[]).push([[688],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=a.createContext({}),s=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(u.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,u=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=s(n),m=r,f=c["".concat(u,".").concat(m)]||c[m]||d[m]||i;return n?a.createElement(f,l(l({ref:t},p),{},{components:n})):a.createElement(f,l({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=c;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var s=2;s<i;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},915:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return o},metadata:function(){return u},toc:function(){return s},default:function(){return d}});var a=n(2122),r=n(9756),i=(n(7294),n(3905)),l={id:"android-feature-api",title:"PROPOSAL - Android Feature API",slug:"/android-feature-api"},o=void 0,u={unversionedId:"android-feature-api",id:"android-feature-api",isDocsHomePage:!1,title:"PROPOSAL - Android Feature API",description:"Manifest",source:"@site/docs/android-feature-api.md",sourceDirName:".",slug:"/android-feature-api",permalink:"/android-feature-api",editUrl:"https://github.com/mozilla/experimenter-docs/edit/main/docs/android-feature-api.md",version:"current",frontMatter:{id:"android-feature-api",title:"PROPOSAL - Android Feature API",slug:"/android-feature-api"},sidebar:"sidebar",previous:{title:"Desktop Front-end testing",permalink:"/desktop-frontend-testing"},next:{title:"Client SDK States & Lifecycle",permalink:"/client-sdk-states-and-lifecycle"}},s=[{value:"Manifest",id:"manifest",children:[]},{value:"Experiment API (DTO)",id:"experiment-api-dto",children:[]},{value:"SDK API",id:"sdk-api",children:[]},{value:"Android API",id:"android-api",children:[{value:"nimbus.getVariables(featureId, sendExposureEvent)",id:"nimbusgetvariablesfeatureid-sendexposureevent",children:[]},{value:"<code>recordExposureEvent(featureId)</code>",id:"recordexposureeventfeatureid",children:[]}]},{value:"Enhancements (Later)",id:"enhancements-later",children:[]}],p={toc:s};function d(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"manifest"},"Manifest"),(0,i.kt)("p",null,"This file should live in Fenix and be readable by the Android Feature API."),(0,i.kt)("p",null,"Note that:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Valid ",(0,i.kt)("inlineCode",{parentName:"li"},"type"),"s are ",(0,i.kt)("inlineCode",{parentName:"li"},"boolean"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"string"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"int"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"drawable")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"choices")," is optional"),(0,i.kt)("li",{parentName:"ul"},"In future releases we will support a ",(0,i.kt)("inlineCode",{parentName:"li"},"defaultValue"),", but for the first iteration of the API this isn't a supported default.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'default_menu_message:\n  description: "A menu message that asks people to set to default",\n  variables:\n    enabled:\n      type: "boolean",\n    icon:\n      type: "drawable",\n      choices:\n        - "firefox-logo"\n        - "firefox-logo-red"\n    position:\n      type: "int",\n    text:\n      type: "string"\n')),(0,i.kt)("h2",{id:"experiment-api-dto"},"Experiment API (DTO)"),(0,i.kt)("p",null,"See ",(0,i.kt)("a",{parentName:"p",href:"https://mana.mozilla.org/wiki/pages/viewpage.action?pageId=130920248"},"full documentation"),". The following is an example of a branch:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'{\n  // Slug can be any arbitrary value\n  "slug": "treatment-red-icon",\n  // For bucketing\n  "ratio": 1,\n  "feature": {\n    // Should match manifest entry\n    "featureId": "tab_bar"\n    // This contains a subset of the variables defined in the manifest entry\n    "value": {\n      "enabled": true,\n      "icon": "red-icon-123",\n      "text": "Hello world"\n    }\n  }\n}\n\n')),(0,i.kt)("p",null,"Notes:\nThe DTO has an ",(0,i.kt)("inlineCode",{parentName:"p"},"enabled")," property, but we will not be handling it here. Instead, we will expect ",(0,i.kt)("inlineCode",{parentName:"p"},"enabled")," to be declared as a boolean variable."),(0,i.kt)("h2",{id:"sdk-api"},"SDK API"),(0,i.kt)("p",null,"The SDK exposes a ",(0,i.kt)("inlineCode",{parentName:"p"},"get_feature_config_variables")," method, which return a value only if an experiment is enrolled\nfor a given feature id. The return type is a ",(0,i.kt)("inlineCode",{parentName:"p"},"String"),"; the Rust SDK has no knowledge of feature or application-specific types."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"pub struct Branch {\n    pub slug: String,\n    pub ratio: i32,\n    pub feature: FeatureConfig\n}\n\npub struct FeatureConfig {\n    pub feature_id: String,\n    // This is where all the variables are, it will be parsed foreign language side\n    pub value: String\n}\n\n// returns FeatureConfig.value\npub fn get_feature_config_variables(feature_id: String) -> Result<Option<String>>\n")),(0,i.kt)("p",null,"Notes:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The SDK should only enroll a maximum of one experiment per feature at a time and should enforce this at enrollment time.")),(0,i.kt)("h2",{id:"android-api"},"Android API"),(0,i.kt)("h3",{id:"nimbusgetvariablesfeatureid-sendexposureevent"},"nimbus.getVariables(featureId, sendExposureEvent)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Calls ",(0,i.kt)("inlineCode",{parentName:"li"},"get_feature_config_variables")," from the Rust SDK, parses the JSON"),(0,i.kt)("li",{parentName:"ul"},"Exposes methods for getting variables of supported types (",(0,i.kt)("inlineCode",{parentName:"li"},"boolean"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"string"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"int"),")"),(0,i.kt)("li",{parentName:"ul"},"Returns ",(0,i.kt)("inlineCode",{parentName:"li"},"null")," if a no value exists for the given ",(0,i.kt)("inlineCode",{parentName:"li"},"featureId")," / ",(0,i.kt)("inlineCode",{parentName:"li"},"variable"))),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'nimbus.getVariables("default_menu_message").getInt("position")\nnimbus.getVariables("default_menu_message").getBool("enabled")\n// In this example, we don\'t send an exposure event\nnimbus.getVariables("default_menu_message", false).getString("text")\n')),(0,i.kt)("p",null,"Note that ",(0,i.kt)("inlineCode",{parentName:"p"},"getVariables")," can take a second param ",(0,i.kt)("inlineCode",{parentName:"p"},"sendExposureEvent")," that is ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," by default, which will send an exposure event when the function is called."),(0,i.kt)("h3",{id:"recordexposureeventfeatureid"},(0,i.kt)("inlineCode",{parentName:"h3"},"recordExposureEvent(featureId)")),(0,i.kt)("p",null,"Use this to manually send an exposure event."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'nimbus.recordExposureEvent("default_menu_message")\n')),(0,i.kt)("h2",{id:"enhancements-later"},"Enhancements (Later)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"isEnabled"),(0,i.kt)("li",{parentName:"ul"},"Figure out localized strings"),(0,i.kt)("li",{parentName:"ul"},"More application-specific types like colours etc."),(0,i.kt)("li",{parentName:"ul"},"Defaults in the manifest"),(0,i.kt)("li",{parentName:"ul"},"Generating types from the manifest"),(0,i.kt)("li",{parentName:"ul"},"Rust API")))}d.isMDXComponent=!0}}]);