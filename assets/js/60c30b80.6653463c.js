(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{101:function(e,t,n){"use strict";n.d(t,"a",(function(){return c})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var b=r.a.createContext({}),s=function(e){var t=r.a.useContext(b),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return r.a.createElement(b.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,b=u(e,["components","mdxType","originalType","parentName"]),c=s(n),d=a,m=c["".concat(l,".").concat(d)]||c[d]||p[d]||i;return n?r.a.createElement(m,o(o({ref:t},b),{},{components:n})):r.a.createElement(m,o({ref:t},b))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=d;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var b=2;b<i;b++)l[b]=n[b];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},84:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return o})),n.d(t,"toc",(function(){return u})),n.d(t,"default",(function(){return s}));var a=n(3),r=n(7),i=(n(0),n(101)),l={id:"android-feature-api",title:"PROPOSAL - Android Feature API",slug:"/android-feature-api"},o={unversionedId:"android-feature-api",id:"android-feature-api",isDocsHomePage:!1,title:"PROPOSAL - Android Feature API",description:"Manifest",source:"@site/docs/android-feature-api.md",sourceDirName:".",slug:"/android-feature-api",permalink:"/android-feature-api",editUrl:"https://github.com/mozilla/experimenter-docs/edit/main/docs/android-feature-api.md",version:"current",frontMatter:{id:"android-feature-api",title:"PROPOSAL - Android Feature API",slug:"/android-feature-api"},sidebar:"sidebar",previous:{title:"Desktop Front-end testing",permalink:"/desktop-frontend-testing"},next:{title:"Client SDK States & Lifecycle",permalink:"/client-sdk-states-and-lifecycle"}},u=[{value:"Manifest",id:"manifest",children:[]},{value:"Experiment API (DTO)",id:"experiment-api-dto",children:[]},{value:"SDK API",id:"sdk-api",children:[]},{value:"Android API",id:"android-api",children:[{value:"nimbus.getVariables(featureId, sendExposureEvent)",id:"nimbusgetvariablesfeatureid-sendexposureevent",children:[]},{value:"<code>recordExposureEvent(featureId)</code>",id:"recordexposureeventfeatureid",children:[]}]},{value:"Enhancements (Later)",id:"enhancements-later",children:[]}],b={toc:u};function s(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"manifest"},"Manifest"),Object(i.b)("p",null,"This file should live in Fenix and be readable by the Android Feature API."),Object(i.b)("p",null,"Note that:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Valid ",Object(i.b)("inlineCode",{parentName:"li"},"type"),"s are ",Object(i.b)("inlineCode",{parentName:"li"},"boolean"),", ",Object(i.b)("inlineCode",{parentName:"li"},"string"),", ",Object(i.b)("inlineCode",{parentName:"li"},"int"),", ",Object(i.b)("inlineCode",{parentName:"li"},"drawable")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"choices")," is optional"),Object(i.b)("li",{parentName:"ul"},"In future releases we will support a ",Object(i.b)("inlineCode",{parentName:"li"},"defaultValue"),", but for the first iteration of the API this isn't a supported default.")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yaml"},'default_menu_message:\n  description: "A menu message that asks people to set to default",\n  variables:\n    enabled:\n      type: "boolean",\n    icon:\n      type: "drawable",\n      choices:\n        - "firefox-logo"\n        - "firefox-logo-red"\n    position:\n      type: "int",\n    text:\n      type: "string"\n')),Object(i.b)("h2",{id:"experiment-api-dto"},"Experiment API (DTO)"),Object(i.b)("p",null,"See ",Object(i.b)("a",{parentName:"p",href:"https://mana.mozilla.org/wiki/pages/viewpage.action?pageId=130920248"},"full documentation"),". The following is an example of a branch:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},'{\n  // Slug can be any arbitrary value\n  "slug": "treatment-red-icon",\n  // For bucketing\n  "ratio": 1,\n  "feature": {\n    // Should match manifest entry\n    "featureId": "tab_bar"\n    // This contains a subset of the variables defined in the manifest entry\n    "value": {\n      "enabled": true,\n      "icon": "red-icon-123",\n      "text": "Hello world"\n    }\n  }\n}\n\n')),Object(i.b)("p",null,"Notes:\nThe DTO has an ",Object(i.b)("inlineCode",{parentName:"p"},"enabled")," property, but we will not be handling it here. Instead, we will expect ",Object(i.b)("inlineCode",{parentName:"p"},"enabled")," to be declared as a boolean variable."),Object(i.b)("h2",{id:"sdk-api"},"SDK API"),Object(i.b)("p",null,"The SDK exposes a ",Object(i.b)("inlineCode",{parentName:"p"},"get_feature_config_variables")," method, which return a value only if an experiment is enrolled\nfor a given feature id. The return type is a ",Object(i.b)("inlineCode",{parentName:"p"},"String"),"; the Rust SDK has no knowledge of feature or application-specific types."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-rust"},"pub struct Branch {\n    pub slug: String,\n    pub ratio: i32,\n    pub feature: FeatureConfig\n}\n\npub struct FeatureConfig {\n    pub feature_id: String,\n    // This is where all the variables are, it will be parsed foreign language side\n    pub value: String\n}\n\n// returns FeatureConfig.value\npub fn get_feature_config_variables(feature_id: String) -> Result<Option<String>>\n")),Object(i.b)("p",null,"Notes:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"The SDK should only enroll a maximum of one experiment per feature at a time and should enforce this at enrollment time.")),Object(i.b)("h2",{id:"android-api"},"Android API"),Object(i.b)("h3",{id:"nimbusgetvariablesfeatureid-sendexposureevent"},"nimbus.getVariables(featureId, sendExposureEvent)"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Calls ",Object(i.b)("inlineCode",{parentName:"li"},"get_feature_config_variables")," from the Rust SDK, parses the JSON"),Object(i.b)("li",{parentName:"ul"},"Exposes methods for getting variables of supported types (",Object(i.b)("inlineCode",{parentName:"li"},"boolean"),", ",Object(i.b)("inlineCode",{parentName:"li"},"string"),", ",Object(i.b)("inlineCode",{parentName:"li"},"int"),")"),Object(i.b)("li",{parentName:"ul"},"Returns ",Object(i.b)("inlineCode",{parentName:"li"},"null")," if a no value exists for the given ",Object(i.b)("inlineCode",{parentName:"li"},"featureId")," / ",Object(i.b)("inlineCode",{parentName:"li"},"variable"))),Object(i.b)("p",null,"Example:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-kotlin"},'nimbus.getVariables("default_menu_message").getInt("position")\nnimbus.getVariables("default_menu_message").getBool("enabled")\n// In this example, we don\'t send an exposure event\nnimbus.getVariables("default_menu_message", false).getString("text")\n')),Object(i.b)("p",null,"Note that ",Object(i.b)("inlineCode",{parentName:"p"},"getVariables")," can take a second param ",Object(i.b)("inlineCode",{parentName:"p"},"sendExposureEvent")," that is ",Object(i.b)("inlineCode",{parentName:"p"},"true")," by default, which will send an exposure event when the function is called."),Object(i.b)("h3",{id:"recordexposureeventfeatureid"},Object(i.b)("inlineCode",{parentName:"h3"},"recordExposureEvent(featureId)")),Object(i.b)("p",null,"Use this to manually send an exposure event."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-kotlin"},'nimbus.recordExposureEvent("default_menu_message")\n')),Object(i.b)("h2",{id:"enhancements-later"},"Enhancements (Later)"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"isEnabled"),Object(i.b)("li",{parentName:"ul"},"Figure out localized strings"),Object(i.b)("li",{parentName:"ul"},"More application-specific types like colours etc."),Object(i.b)("li",{parentName:"ul"},"Defaults in the manifest"),Object(i.b)("li",{parentName:"ul"},"Generating types from the manifest"),Object(i.b)("li",{parentName:"ul"},"Rust API")))}s.isMDXComponent=!0}}]);