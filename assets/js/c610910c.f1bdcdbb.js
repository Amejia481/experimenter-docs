(self.webpackChunkexperimenter_docs=self.webpackChunkexperimenter_docs||[]).push([[900],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),u=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(o.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=u(n),m=r,f=c["".concat(o,".").concat(m)]||c[m]||d[m]||i;return n?a.createElement(f,s(s({ref:t},p),{},{components:n})):a.createElement(f,s({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=c;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:r,s[1]=l;for(var u=2;u<i;u++)s[u]=n[u];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},4992:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return o},toc:function(){return u},default:function(){return d}});var a=n(2122),r=n(9756),i=(n(7294),n(3905)),s={id:"fm-unimplemented-spec",title:"Proposed changes for Feature Manifest Language",slug:"/fm-unimplemented-spec"},l=void 0,o={unversionedId:"deep-dives/specifications/fm-unimplemented-spec",id:"deep-dives/specifications/fm-unimplemented-spec",isDocsHomePage:!1,title:"Proposed changes for Feature Manifest Language",description:"Future specifications",source:"@site/docs/deep-dives/specifications/fm-unimplemented-spec.mdx",sourceDirName:"deep-dives/specifications",slug:"/fm-unimplemented-spec",permalink:"/fm-unimplemented-spec",editUrl:"https://github.com/mozilla/experimenter-docs/edit/main/docs/deep-dives/specifications/fm-unimplemented-spec.mdx",tags:[],version:"current",frontMatter:{id:"fm-unimplemented-spec",title:"Proposed changes for Feature Manifest Language",slug:"/fm-unimplemented-spec"},sidebar:"sidebar",previous:{title:"Client SDK States & Lifecycle",permalink:"/client-sdk-states-and-lifecycle"},next:{title:"Feature Manifest Language Front-end Format As YAML",permalink:"/fml-front-end-format"}},u=[{value:"Future specifications",id:"future-specifications",children:[{value:"Feature defaults and runtime targeting",id:"feature-defaults-and-runtime-targeting",children:[]},{value:"Types coerced from <code>String</code>",id:"types-coerced-from-string",children:[]}]},{value:"Variables and fields with no defaults",id:"variables-and-fields-with-no-defaults",children:[{value:"Required fields",id:"required-fields",children:[]},{value:"Failable features",id:"failable-features",children:[]}]}],p={toc:u};function d(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"future-specifications"},"Future specifications"),(0,i.kt)("p",null,"This document houses a number of proposals not ready for comment. They are not linked to from the spec."),(0,i.kt)("h3",{id:"feature-defaults-and-runtime-targeting"},"Feature defaults and runtime targeting"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"\u26a0\ufe0f Unimplemented. This is intended to use the same JEXL targeting used elsewhere in Nimbus SDK.")),(0,i.kt)("p",null,"Occassionally, we would like to vary a configuration based upon the device. In this example, the ",(0,i.kt)("inlineCode",{parentName:"p"},"homepage")," feature has sections for both Pocket and Topsites."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"features:\n  homepage:\n    variables:\n      pocket-enabled:\n        description: If true, show stories from Pocket. This is only available in certain territories.\n        type: Bool\n        default: false\n      topsites-enabled:\n        description: If true, show tiles from the users most recent and frequently visited pages.\n        type: Bool\n        default: false\n    defaults:\n      - channel: nightly\n        value: { topsites-enabled: true }\n      - channel: nightly\n        targeting: locale in ['en-US', 'de-DE', 'en-GB']\n        value: { pocket-enabled: true }\n")),(0,i.kt)("p",null,"In this example, ",(0,i.kt)("inlineCode",{parentName:"p"},"pocket-enabled")," defaults to ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," only on the ",(0,i.kt)("inlineCode",{parentName:"p"},"nightly")," channel and when the device locale is in ",(0,i.kt)("inlineCode",{parentName:"p"},"US"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"DE")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"GB"),"."),(0,i.kt)("h3",{id:"types-coerced-from-string"},"Types coerced from ",(0,i.kt)("inlineCode",{parentName:"h3"},"String")),(0,i.kt)("p",null,"We have already seen enums being declared in the ",(0,i.kt)("inlineCode",{parentName:"p"},"types")," section of the manifest."),(0,i.kt)("p",null,"Other types that may be derived from ",(0,i.kt)("inlineCode",{parentName:"p"},"String"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Color")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"URL"))),(0,i.kt)("h2",{id:"variables-and-fields-with-no-defaults"},"Variables and fields with no defaults"),(0,i.kt)("h3",{id:"required-fields"},"Required fields"),(0,i.kt)("p",null,"Some object fields do not have a sensible default value, but without them, the object itself doesn't make sense."),(0,i.kt)("p",null,"For example a ",(0,i.kt)("inlineCode",{parentName:"p"},"MessageItem")," doesn't make sense unless it has a ",(0,i.kt)("inlineCode",{parentName:"p"},"message")," and a ",(0,i.kt)("inlineCode",{parentName:"p"},"deeplink"),". Where any required fields are missing from the JSON, the ",(0,i.kt)("inlineCode",{parentName:"p"},"MessageItem")," is incomplete, and cannot be used."),(0,i.kt)("p",null,"Incomplete objects cannot be included in maps, lists or optional types."),(0,i.kt)("p",null,"In this case, a message surface is added to the ",(0,i.kt)("inlineCode",{parentName:"p"},"new-tab"),", but isn't always needed to be displayed."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"features:\n  new-tab:\n    variables:\n      message:\n        description: An optional message\n        type: MessageItem?\n        default: null\ntypes:\n  MessageItem:\n    description: \u2026\n    fields:\n      label:\n        type: String\n        required: true\n      deeplink:\n        type: String\n        required: true\n")),(0,i.kt)("p",null,"In these cases, the app code must deal with the cases with objects that are said to be failable, because there are no defaults."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"let newTabConfig = FxNimbus.features.newTab.value()\n\nif let message = newTabConfig.message {\n    // We have to check that the message exists, because the message may not exist.\n    displayMessage(message.label, message.deeplink)\n}\n\n// continue configuring the new tab.\n")),(0,i.kt)("h3",{id:"failable-features"},"Failable features"),(0,i.kt)("p",null,"Feature ",(0,i.kt)("inlineCode",{parentName:"p"},"variables")," may also be marked as ",(0,i.kt)("inlineCode",{parentName:"p"},"required"),". In the cases where these variables are missing, then the whole feature no longer makes sense."),(0,i.kt)("p",null,"Features with ",(0,i.kt)("inlineCode",{parentName:"p"},"required")," variables must be marked as ",(0,i.kt)("inlineCode",{parentName:"p"},"failable"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"features:\n  emergency-startup-message:\n    failable: true\n    description: A message displayed to the user at start up.\n      variables:\n        message-content:\n          description: The long form message to be displayed to the user\n          type: String\n          required: true\n        color:\n          description: The background color of the screen\n          type: String\n          default: red\n")),(0,i.kt)("p",null,"Failable features are implemented as Optional. If the feature is incomplete or failed, then it is returned as ",(0,i.kt)("inlineCode",{parentName:"p"},"nil")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"null"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"guard let message = FxNimbus.features.emergencyStartupMessage else {\n    // phew, there is no emergency message.\n    return\n}\n")),(0,i.kt)("p",null,"Features with ",(0,i.kt)("inlineCode",{parentName:"p"},"required")," variables which should be marked ",(0,i.kt)("inlineCode",{parentName:"p"},"failable")," but aren't will produce an error."))}d.isMDXComponent=!0}}]);