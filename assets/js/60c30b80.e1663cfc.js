(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{81:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return l})),t.d(n,"metadata",(function(){return o})),t.d(n,"toc",(function(){return u})),t.d(n,"default",(function(){return b}));var a=t(3),r=t(7),i=(t(0),t(99)),l={id:"android-feature-api",title:"PROPOSAL - Android Feature API",slug:"/android-feature-api"},o={unversionedId:"android-feature-api",id:"android-feature-api",isDocsHomePage:!1,title:"PROPOSAL - Android Feature API",description:"Manifest",source:"@site/docs/android-feature-api.md",slug:"/android-feature-api",permalink:"/experimenter-docs/android-feature-api",editUrl:"https://github.com/mozilla/experimenter-docs/edit/main/docs/android-feature-api.md",version:"current",sidebar:"sidebar",previous:{title:"Root Page",permalink:"/experimenter-docs/experimenter-engineers"}},u=[{value:"Manifest",id:"manifest",children:[]},{value:"Experiment API (DTO)",id:"experiment-api-dto",children:[]},{value:"SDK API",id:"sdk-api",children:[]},{value:"Android API",id:"android-api",children:[{value:"<code>get[type]Variable(variable)</code>",id:"gettypevariablevariable",children:[]},{value:"<code>getAllVariables()</code>",id:"getallvariables",children:[]},{value:"<code>recordExposureEvent()</code>",id:"recordexposureevent",children:[]}]}],c={toc:u};function b(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"manifest"},"Manifest"),Object(i.b)("p",null,"This file should live in Fenix and be readable by the Android Feature API:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yaml"},'default_menu_message:\n  description: "A menu message that asks people to set to default",\n  variables:\n    enabled:\n      type: "boolean",\n      # Optional\n      defaultValue: false\n    icon:\n      type: "string",\n      defaultValue: "firefox-logo"\n    position:\n      type: "int",\n      defaultValue: 4\n    text:\n      type: "string"\n      # Q: How do we do localized/unlocalized text here?\n      defaultValue: "Set as default browser"\n\n')),Object(i.b)("h2",{id:"experiment-api-dto"},"Experiment API (DTO)"),Object(i.b)("p",null,"See ",Object(i.b)("a",{parentName:"p",href:"https://mana.mozilla.org/wiki/pages/viewpage.action?pageId=130920248"},"full documentation"),". The following is an example of a branch:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},'{\n  // Slug can be any arbitrary value\n  "slug": "treatment-red-icon",\n  // For bucketing\n  "ratio": 1,\n  "feature": {\n    // Should match manifest entry\n    "featureId": "tab_bar"\n\n    // I\'d be open to switching this to "variables", but this is the current format\n    "enabled": false,\n    "value": {\n      "icon": "red-icon-123"\n    }\n  }\n}\n\n')),Object(i.b)("h2",{id:"sdk-api"},"SDK API"),Object(i.b)("p",null,'The SDK exposes a "get branch by feature" method, which returns a value only if an experiment is enrolled\nfor a given feature id. ',Object(i.b)("inlineCode",{parentName:"p"},"value")," is returned as stringified JSON; the Rust SDK has no knowledge of feature or application-specific types."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-rust"},"pub struct Branch {\n    pub slug: String,\n    pub ratio: i32,\n    pub feature: FeatureConfig,\n}\n\npub struct FeatureConfig {\n    pub feature_id: String,\n    pub enabled: Boolean,\n    pub value: String\n\n}\n\npub fn get_branch_by_feature(feature_id: String) -> Option<Branch>\n")),Object(i.b)("p",null,"Some important notes:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"The SDK should only enroll a maximum of one experiment per feature at a time.")),Object(i.b)("h2",{id:"android-api"},"Android API"),Object(i.b)("p",null,"The Android API:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"reads the manifest to see which variables it expects"),Object(i.b)("li",{parentName:"ul"},"calls ",Object(i.b)("inlineCode",{parentName:"li"},"get_branch_by_feature")," from the Rust SDK and parses the JSON from ",Object(i.b)("inlineCode",{parentName:"li"},"featureConfig.value"))),Object(i.b)("h3",{id:"gettypevariablevariable"},Object(i.b)("inlineCode",{parentName:"h3"},"get[type]Variable(variable)")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-kotlin"},"public @Nullable Boolean getBoolVariable(@Nonnull String variableName)\npublic @Nullable Int getIntVariable(@Nonnull String variableName)\npublic @Nullable String getStringVariable(@Nonnull String variableName)\npublic @Nullable String getJSONVariable(@Nonnull String variableName)\n")),Object(i.b)("p",null,"Example:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-kotlin"},'// TODO: Discuss\nNimbusFeatures.defaultMenuMessage.getIntVariable("position")\nNimbusFeatures.defaultMenuMessage.variables.position\nNimbusFeatures.getIntVariable("default_menu_message", "position")\n``\n\n### `isEnabled()`\n\n```kotlin\npublic @Nullable Boolean isEnabled()\n')),Object(i.b)("p",null,"In Desktop this checks ",Object(i.b)("inlineCode",{parentName:"p"},"featureConfig.enabled"),", but I'd be fine with changing it to be synactic sugar for ",Object(i.b)("inlineCode",{parentName:"p"},'getBoolVariable("enabled")')),Object(i.b)("h3",{id:"getallvariables"},Object(i.b)("inlineCode",{parentName:"h3"},"getAllVariables()")),Object(i.b)("p",null,"This is the equivalent of ",Object(i.b)("inlineCode",{parentName:"p"},"getValue()")," in Desktop. Do we need this for the first iteration?"),Object(i.b)("h3",{id:"recordexposureevent"},Object(i.b)("inlineCode",{parentName:"h3"},"recordExposureEvent()")),Object(i.b)("p",null,"Use this to manually send an exposure event."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-kotlin"},"NimbusFeatures.myFeature.recordExposureEvent();\n")))}b.isMDXComponent=!0},99:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return f}));var a=t(0),r=t.n(a);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=r.a.createContext({}),b=function(e){var n=r.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=b(e.components);return r.a.createElement(c.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},d=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),p=b(t),d=a,f=p["".concat(l,".").concat(d)]||p[d]||s[d]||i;return t?r.a.createElement(f,o(o({ref:n},c),{},{components:t})):r.a.createElement(f,o({ref:n},c))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,l=new Array(i);l[0]=d;var o={};for(var u in n)hasOwnProperty.call(n,u)&&(o[u]=n[u]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var c=2;c<i;c++)l[c]=t[c];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"}}]);